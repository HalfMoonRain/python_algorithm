'''
문제 설명
명함 지갑을 만드는 회사에서 지갑의 크기를 정하려고 합니다. 다양한 모양과 크기의 명함들을 모두 수납할 수 있으면서, 작아서 들고 다니기 편한 지갑을 만들어야 합니다. 이러한 요건을 만족하는 지갑을 만들기 위해 디자인팀은 모든 명함의 가로 길이와 세로 길이를 조사했습니다.

아래 표는 4가지 명함의 가로 길이와 세로 길이를 나타냅니다.

명함 번호	가로 길이	세로 길이
1	60	50
2	30	70
3	60	30
4	80	40
가장 긴 가로 길이와 세로 길이가 각각 80, 70이기 때문에 80(가로) x 70(세로) 크기의 지갑을 만들면 모든 명함들을 수납할 수 있습니다. 하지만 2번 명함을 가로로 눕혀 수납한다면 80(가로) x 50(세로) 크기의 지갑으로 모든 명함들을 수납할 수 있습니다. 이때의 지갑 크기는 4000(=80 x 50)입니다.

모든 명함의 가로 길이와 세로 길이를 나타내는 2차원 배열 sizes가 매개변수로 주어집니다. 모든 명함을 수납할 수 있는 가장 작은 지갑을 만들 때, 지갑의 크기를 return 하도록 solution 함수를 완성해주세요.

제한사항
sizes의 길이는 1 이상 10,000 이하입니다.
sizes의 원소는 [w, h] 형식입니다.
w는 명함의 가로 길이를 나타냅니다.
h는 명함의 세로 길이를 나타냅니다.
w와 h는 1 이상 1,000 이하인 자연수입니다.
입출력 예
sizes	result
[[60, 50], [30, 70], [60, 30], [80, 40]]	4000
[[10, 7], [12, 3], [8, 15], [14, 7], [5, 15]]	120
[[14, 4], [19, 6], [6, 16], [18, 7], [7, 11]]	133
입출력 예 설명
입출력 예 #1
문제 예시와 같습니다.

입출력 예 #2
명함들을 적절히 회전시켜 겹쳤을 때, 3번째 명함(가로: 8, 세로: 15)이 다른 모든 명함보다 크기가 큽니다. 따라서 지갑의 크기는 3번째 명함의 크기와 같으며, 120(=8 x 15)을 return 합니다.

입출력 예 #3
명함들을 적절히 회전시켜 겹쳤을 때, 모든 명함을 포함하는 가장 작은 지갑의 크기는 133(=19 x 7)입니다.
'''

sizes = [[60, 50], [30, 70], [60, 30], [80, 40]]

max_value = 0
min_value = 0

for sub_list in sizes:
    in_max_value = max(sub_list)
    in_min_value = min(sub_list)

    if max_value < in_max_value:
        max_value = in_max_value

    if min_value < in_min_value:
        min_value = in_min_value

print(max_value * min_value)

'''
이중 리스트에서 최대값을 찾으려면 여러 가지 방법을 사용할 수 있습니다. 아래에 몇 가지 방법을 제시해 드리겠습니다.

기본적인 이중 반복문 사용:
이 방법은 각 요소를 검사하며 최대값을 찾습니다.

lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
max_value = lst[0][0]

for sub_list in lst:
    for item in sub_list:
        if item > max_value:
            max_value = item

print(max_value)

내장 함수 사용:
max() 함수와 리스트 컴프리헨션을 사용하여 코드를 더 간결하게 작성할 수 있습니다.

lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
max_value = max(max(sub_list) for sub_list in lst)
print(max_value)

이중 리스트를 단일 리스트로 변환 후 최대값 찾기:
이 방법은 이중 리스트의 모든 요소를 하나의 단일 리스트로 변환한 다음 max() 함수를 사용하여 최대값을 찾습니다.

lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
flattened = [item for sub_list in lst for item in sub_list]
max_value = max(flattened)
print(max_value)

이 중에서 가장 간단하거나 가장 효율적인 방법을 선택하여 사용하시면 됩니다.

이중 리스트의 최대값을 찾는 위의 세 방법 모두 최종적으로는 리스트의 모든 요소를 한 번씩 검사해야 합니다. 그러므로 세 방법 모두 시간 복잡도는 
O(n×m) 입니다. 여기서 
n은 이중 리스트의 크기 (즉, 하위 리스트의 수)이며 
m은 하위 리스트의 평균 크기입니다.

하지만 이중 리스트를 단일 리스트로 변환하는 방법(세 번째 방법)은 추가적인 리스트 생성 과정이 필요합니다. 이 과정은 추가적인 시간과 공간을 요구하므로 실제 실행 시간은 다소 느릴 수 있습니다.

그러므로, 세 방법 중에서는 첫 번째와 두 번째 방법이 시간적으로는 가장 효율적이라고 할 수 있습니다. 그러나 두 번째 방법이 내부적으로 Python의 내장 함수를 사용하기 때문에 실제 실행 시간에서는 더 빠를 가능성이 높습니다.
'''

def solution(sizes):
    '''
    최대값 : 큰것 중 가장 큰 값
    최소값 : 작은 것 중 가장 작은 값
    '''
    max_value = 0
    min_value = 0

    for sub_list in sizes:
        in_max_value = max(sub_list)
        in_min_value = min(sub_list)

        if max_value < in_max_value:
            max_value = in_max_value

        if min_value < in_min_value:
            min_value = in_min_value

    return max_value * min_value